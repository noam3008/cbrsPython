'''
Created on Apr 24, 2017

@author: iagmon
'''
import threading
from threading import Thread
from CLIUtils.CsvFileParser import CsvFileParser
from CLIUtils.QuestionHandler import QuestionHandler
from CLIUtils.TestDefinition import TestDefinition
from model.Engine import MyEngine
import logging
import time
import model.Utils.Consts as consts
from model import flaskServer
from ENodeBController import ENodeBController
from controllers.CLIUtils.LoggerHandler import LoggerHandler

class CLIHandler(Thread):
    '''
    classdocs
    '''
    def __init__(self,csvFilePath,confFile,dirPath,loggerHandler):
        '''
        Constructor
        '''
        Thread.__init__(self)
        self.confFile           = confFile
        self.dirPath            = dirPath
        self._stop              = threading.Event()
        self.loggerHandler      = loggerHandler
        self.questHandler       = QuestionHandler(self.loggerHandler)
        self.testDefinition     = TestDefinition(CsvFileParser(str(self.dirPath)+self.confFile.getElementsByTagName("testRepoPath")[0].firstChild.data+csvFilePath).initializeTestDefinition(),loggerHandler)
        self.numberOfLogger     = self.loggerHandler.currentLoggerName
        self.engine             = MyEngine(self.testDefinition,confFile,dirPath,loggerHandler)
        self.start()
    
    ''' the method get the step list and sent to the engine the correct json file name to wait for '''
        
    def stop_Thread_Due_To_Exception(self):
        self.loggerHandler.print_And_Log_To_File(self.numberOfLogger, consts.CLOSE_USER_SESSION)
        self._stop.set() 
    
    def run(self):   
        while(not self.engine.isNstep and not self._stop.isSet()):
            time.sleep(1)
            if(self.engine.validationErrorAccuredInEngine):
                self.stop_Thread_Due_To_Exception()
        if not self._stop.is_set():
            finalResults = self.questHandler.ShowQuestionsAndGetAnswersFromClient(self.engine.get_Question_Answer_Part())
            self.loggerHandler.print_And_Log_To_File(self.numberOfLogger,consts.RESULTS_OF_TEST_MESSAGE + str(finalResults[0]))
            if(finalResults[1]!=""):
                self.loggerHandler.print_And_Log_To_File(self.numberOfLogger,consts.ADDITIONAL_COMMENTS_MESSAGE + str(finalResults[1]))
            self.start_another_test(self)
        else:
            self.loggerHandler.print_And_Log_To_File(self.numberOfLogger,consts.ERROR_VALIDATION_MESSAGE)
            self.start_another_test(self)
            
    def start_another_test(self,cliHandler):
        self.loggerHandler.print_And_Log_To_File(self.numberOfLogger,consts.SET_CSV_FILE_MESSAGE)
        inputAnswer=raw_input()   
        cliHandler = cliHandler
        if (inputAnswer !="quit"):
            number = int(self.numberOfLogger) 
            number += 1
            self.numberOfLogger = str(number)
            print number
            print self.numberOfLogger    
            self.loggerHandler = LoggerHandler(self.dirPath)
            self.loggerHandler.create_New_Logger(self.numberOfLogger)
            self.loggerHandler.print_And_Log_To_File(self.numberOfLogger,"the selected test from the user is : " + inputAnswer)
            cliHandler = CLIHandler(inputAnswer,self.confFile,self.dirPath,self.loggerHandler) 
            flaskServer.enodeBController = ENodeBController(cliHandler.engine)
            flaskServer.runFlaskServer(self.confFile.getElementsByTagName("hostIp")[0].firstChild.data) 
        elif(inputAnswer =="quit"):
            from flask import request
            with flaskServer.app.test_request_context('/hello', method='POST'):
            # now you can do something with the request until the
            # end of the with block, such as basic assertions:
            assert request.path == '/hello'
            assert request.method == 'POST'
        if(cliHandler.engine.validationErrorAccuredInEngine):
            cliHandler.stop_Thread_Due_To_Exception()
            
            