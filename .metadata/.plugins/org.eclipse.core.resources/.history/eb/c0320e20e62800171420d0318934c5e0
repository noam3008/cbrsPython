'''
Created on Apr 20, 2017

@author: iagmon
'''
import json
import logging
import jsonComparisonUtils
class Assertion(object):
    '''
    classdocs
    '''


    def __init__(self):
        noam = 1
        '''
        Constructor
        '''
        
    def compareJsonReq(self,httpRequest,jsonExpected):
        logging.info("compare two jsons")
        ''' the method will get the request json file name from the client request and will get from the two repo
        off the client and the server the json expected and the real json sent from the client '''
        
        jsonRequest = self.parseJsonToDic("C:/Users/iagmon/Desktop/jsonFromClient/",httpRequest,"request")
        #jsonRequest = self.parseJsonToDic(httpRequest,"request")
        jsonExpectedObj = self.parseJsonToDic("C:/Users/iagmon/Desktop/jsonFolder/",jsonExpected,"request")       
        x = jsonComparisonUtils.are_same(jsonRequest,jsonExpectedObj) 
        assert True in x
        
        ################## the compare of the actual and expected request
                
    def compare_json(self,x,y):
        for i in range(len(x)):
            self.assertEqual(x[i],y[i])
            
    def assertEqual(self,actual,expected):
        assert actual==expected
                 
    
    def parseJsonToDic(self,filePathOfJsons,jsonFileName,nodeOfJsonRequest):
        filePath = filePathOfJsons
        myfile = open(filePath+str(jsonFileName))
        jsonAfterParse = json.load(myfile)
        print jsonAfterParse[nodeOfJsonRequest]
    
   
   
    #def RecursiveOrderedJson(self,actualJson):
    #    arr_2d = [[]]
    #    for k, v in actualJson.items():
    #        if isinstance(v, dict):
    #            self.RecursiveOrderedJson(v)
    #        else:
                #print("{0} : {1}".format(k, v))
    #            if(k,v!=None):
    #                arr_2d.append([k,v])
    #    return arr_2d
    

    
        
        
        
        
        