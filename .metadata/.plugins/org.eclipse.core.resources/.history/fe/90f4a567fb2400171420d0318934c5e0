"""Asynchronous requests in Flask with gevent"""

from time import time

from flask import Flask, Response
from gevent.pywsgi import WSGIServer
from gevent import monkey
import requests
from werkzeug.utils import redirect
from flask.helpers import url_for

# need to patch sockets to make requests async
monkey.patch_all()

CHUNK_SIZE = 1024*1024  # bytes

app = Flask(__name__)  # pylint: disable=invalid-name
app.debug = True

@app.route('/articles')
def api_articles():
    return 'List of _articles'

import xml.etree.ElementTree as ET
tree = ET.parse("confOfResp.xml")
doc = tree.getroot()
import thread
from flask import Response,jsonify,json,request
@app.route('/hello', methods = ['GET'])
def api_hello(requests_counter=[0]):
    print("api helloo")
    requests_counter[0] += 1
    request_num = requests_counter[0]

    app.logger.debug('started %d', request_num)
    
    if(request_num==1):
        data = {
        'hello'  : doc[0].text,
        'number' : doc[1].text,
        'name' : 'sas'
    }
    else:
        data = {
        'hello'  : doc[0].text,
        'number' : doc[1].text,
        'name' : 'sas2'
    } 
        
    js = json.dumps(data)

    resp = jsonify(data)
    resp.headers['Link'] = 'http://luisrei.com'
    return redirect(url_for('post',email='x'))


@app.route('/post', methods = ['POST','GET'])
def post(email):
    print("postttt")
    # Get the parsed contents of the form data
    # Render template
    return email


@app.route('/moro')
def seattle(requests_counter=[0]):  # pylint: disable=dangerous-default-value
    """Asynchronous non-blocking streaming of relatively large (14.5MB) JPG
    of Seattle from wikimedia commons.
    """
    requests_counter[0] += 1
    request_num = requests_counter[0]
    url = 'http://upload.wikimedia.org/wikipedia/commons/3/39/Seattle_3.jpg'

    app.logger.debug('started %d', request_num)

    rsp = requests.get(url, stream=True)

    def generator():
        "streaming generator logging the end of request processing"
        yield ''  # to make greenlet switch
        for data in rsp.iter_content(CHUNK_SIZE):
            yield data
        app.logger.debug('finished %d', request_num)

    return Response(generator(), mimetype='image/jpeg')


def main():
    "Start gevent WSGI server"
    # use gevent WSGI server instead of the Flask
    http = WSGIServer(('10.3.35.58', 5000), app.wsgi_app)
    # TODO gracefully handle shutdown
    http.serve_forever()


if __name__ == '__main__':
    main()