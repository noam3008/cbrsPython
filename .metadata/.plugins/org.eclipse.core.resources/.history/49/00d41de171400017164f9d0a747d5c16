'''
Created on Apr 20, 2017

@author: iagmon
'''

from model.Utils.Assert import Assertion 
import model.Utils.JsonComparisonUtils as jsonComparer
import model.Utils.Consts as consts
import datetime as DT
from model.CBRSObject import CBRSObject as cbrsObj


class MyEngine(object):

    def __init__(self,testDefinition,confFile,dirPath,currentLogger):
        self.numberOfStep                       = 0
        self.numberOfHearbeatRequests           = 0
        self.testDefinition                    = testDefinition
        self.validationErrorAccuredInEngine     = False
        self.isLastStepInCSV                    = False
        self.confFile                           = confFile
        self.dirPath                            = dirPath
        self.heartBeatLimitCounter              = confFile.getElementsByTagName("heartbeatLimit")[0].firstChild.data
        self.currentLogger                      = currentLogger
        self.assertion                          = Assertion(confFile,dirPath,currentLogger)
        self.repeatesAllowed                    = False
        self.repeatsType                        = None
        self.oldHttpReq                         = None
        self.validDurationTime                  = 0
        self.lastHeartBeatTime                  = None
        self.grantBeforeHeartBeat               = False
        self.cbrsObjArray                       = []

    def process_request(self,httpRequest,typeOfCalling):
        '''
        the method perform validation to the current httpRequest json 
        '''
        listOfAnsweres = []
        for httpReq in httpRequest[typeOfCalling+consts.REQUEST_NODE_NAME]:
            i = 0
            if(typeOfCalling=="registration"):
                try:
                    self.add_Cbrs_Obj(httpReq["fccId"])
                except:
                    self.validationErrorAccuredInEngine = True
                    return "ERROR - the http request that is type of registration dont include : fccId attribute" 
                if(i==0):
                    firstResponse = self.handle_Http_Req(httpReq["fccId"],httpReq,typeOfCalling)
                if len(httpRequest[typeOfCalling+consts.REQUEST_NODE_NAME])==1:
                    return self.handle_Http_Req(httpReq["fccId"],httpReq,typeOfCalling) ## only in registration
                else:
                    firstResponse["registrationResponse"].append(self.handle_Http_Req(httpReq["fccId"],httpReq,typeOfCalling)["registrationResponse"])
                    
            else:
                try:
                    reqIndex = str(httpReq["cbsdId"]).index("cbsd")
                except : 
                    self.validationErrorAccuredInEngine = True
                    return "ERROR - the http request that is not type of registration dont include : cbsd attribute" 
                try:
                    listOfAnsweres.append(self.handle_Http_Req(str(httpReq["cbsdId"])[:reqIndex], httpReq, typeOfCalling))
                except Exception as E:
                    self.validationErrorAccuredInEngine = True
                    return E.message
            i+=1
                    
    
    def add_Cbrs_Obj(self,fccIdAttr):
        tempCbrsObj = cbrsObj(fccIdAttr, self.testDefinition, self.confFile, self.dirPath,self.currentLogger)
        if tempCbrsObj not in self.cbrsObjArray:
            self.cbrsObjArray.append(tempCbrsObj)
    
    def handle_Http_Req(self,fccIdAttr,httpReq,typeOfCalling):
        for cbrsObj in self.cbrsObjArray: 
            if cbrsObj.fccId == fccIdAttr:
                return cbrsObj.handle_Http_Req(httpReq,typeOfCalling)
        self.validationErrorAccuredInEngine = True
        raise IOError("ERROR - there is no cbrs obj registered with the fccId :  " + str(fccIdAttr) )
    
    def check_Validation_Error(self):
        if self.validationErrorAccuredInEngine == True:
            return True
        for cbrsObj in self.cbrsObjArray: 
            if cbrsObj.validationErrorAccuredInEngine ==True:
                return True
        return False
        
        
        
            
        
        
    

    
    
    