'''
Created on Apr 24, 2017

@author: iagmon
'''
import threading
from threading import Thread
from CLIUtils.CsvFileParser import CsvFileParser
from CLIUtils.QuestionHandler import QuestionHandler
from CLIUtils.TestDefinition import TestDefinition
from model.Engine import MyEngine
import logging
import time
import model.Utils.Consts as consts
from model import flaskServer
from ENodeBController import ENodeBController
from controllers.CLIUtils.LoggerHandler import LoggerHandler
from werkzeug import abort
from flask import current_app

class CLIHandler(Thread):
    '''
    classdocs
    '''
    def __init__(self,csvFilePath,confFile,dirPath,loggerHandler):
        '''
        Constructor
        '''
        Thread.__init__(self)
        self.confFile           = confFile
        self.dirPath            = dirPath
        self._stop              = threading.Event()
        self.loggerHandler      = loggerHandler
        self.questHandler       = QuestionHandler(self.loggerHandler)
        self.testDefinition     = TestDefinition(CsvFileParser(str(self.dirPath)+self.confFile.getElementsByTagName("testRepoPath")[0].firstChild.data+csvFilePath).initializeTestDefinition(),loggerHandler)
        self.numberOfLogger     = self.loggerHandler.currentLoggerName
        self.engine             = MyEngine(self.testDefinition,confFile,dirPath,loggerHandler)
        self.server             = None 
        self.start()
    
    ''' the method get the step list and sent to the engine the correct json file name to wait for '''
        
    def stop_Thread_Due_To_Exception(self):
        self.loggerHandler.print_And_Log_To_File(consts.CLOSE_USER_SESSION,True)
        self._stop.set() 
    
    def run(self):   
        while(not self.engine.isNstep and not self._stop.isSet()):
            time.sleep(1)
            if(self.engine.validationErrorAccuredInEngine):
                self.stop_Thread_Due_To_Exception()
        if not self._stop.is_set():
            finalResults = self.questHandler.ShowQuestionsAndGetAnswersFromClient(self.engine.get_Question_Answer_Part())
            self.loggerHandler.print_And_Log_To_File(consts.RESULTS_OF_TEST_MESSAGE + str(finalResults[0]),True)
            if(finalResults[1]!=""):
                self.loggerHandler.print_And_Log_To_File(consts.ADDITIONAL_COMMENTS_MESSAGE + str(finalResults[1]),True)
            self.start_another_test(self)
        else:
            self.loggerHandler.print_And_Log_To_File(consts.ERROR_VALIDATION_MESSAGE,True)
            self.start_another_test(self)
        
    def start_another_test(self,cliHandler):      
        self.loggerHandler.print_And_Log_To_File(consts.SET_CSV_FILE_MESSAGE,True)
        inputAnswer=raw_input()   
        cliHandler = cliHandler
        if (inputAnswer !="quit"):
            self.raise_number_of_logger()
            
            self.loggerHandler = LoggerHandler(self.dirPath)
            self.loggerHandler.create_New_Logger(self.numberOfLogger)
            self.loggerHandler.print_And_Log_To_File("the selected test from the user is : " + inputAnswer,True)
            cliHandler = CLIHandler(inputAnswer,self.confFile,self.dirPath,self.loggerHandler) 
            flaskServer.enodeBController = ENodeBController(cliHandler.engine)
            flaskServer.runFlaskServer(self.confFile.getElementsByTagName("hostIp")[0].firstChild.data) 
               
        if(cliHandler.engine.validationErrorAccuredInEngine):
            cliHandler.stop_Thread_Due_To_Exception()
    def rais_number_of_logger(self):
        number = int(self.numberOfLogger) 
        number+=1
        self.numberOfLogger = str(number)
           
        
        
            