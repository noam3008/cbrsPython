"""Asynchronous requests in Flask with gevent"""

from time import time

from flask import Flask, Response
from gevent.pywsgi import WSGIServer
from gevent import monkey
import requests
from werkzeug.utils import redirect
from flask.helpers import url_for

# need to patch sockets to make requests async
monkey.patch_all()

app = Flask(__name__)  # pylint: disable=invalid-name
app.debug = True

import xml.etree.ElementTree as ET
tree = ET.parse("confOfResp.xml")
doc = tree.getroot()
import thread
from flask import Response,jsonify,json,request


@app.route('/first')
def first_func(requests_counter=[0]):  # pylint: disable=dangerous-default-value
    """Asynchronous non-blocking streaming of relatively large (14.5MB) JPG
    of Seattle from wikimedia commons.
    """
    requests_counter[0] += 1
    request_num = requests_counter[0]
    url = 'http://stories4kid.com/313667_196.jpg'

    app.logger.debug('started %d', request_num)

    rsp = requests.get(url, stream=True)
    return rsp
@app.route('/second')
def second_func(requests_counter=[0]):  # pylint: disable=dangerous-default-value
    """Asynchronous non-blocking streaming of relatively large (14.5MB) JPG
    of Seattle from wikimedia commons.
    """
    requests_counter[0] += 1
    request_num = requests_counter[0]
    url = 'http://stories4kid.com/313667_196.jpg'

    app.logger.debug('started %d', request_num)

    rsp = requests.get(url, stream=True)
    return rsp
@app.route('/third')
def third_func(requests_counter=[0]):  # pylint: disable=dangerous-default-value
    """Asynchronous non-blocking streaming of relatively large (14.5MB) JPG
    of Seattle from wikimedia commons.
    """
    requests_counter[0] += 1
    request_num = requests_counter[0]
    url = 'http://stories4kid.com/313667_196.jpg'

    app.logger.debug('started %d', request_num)

    rsp = requests.get(url, stream=True)
    return rsp
def main():
    "Start gevent WSGI server"
    # use gevent WSGI server instead of the Flask
    http = WSGIServer(('10.3.35.58', 5000), app.wsgi_app)
    # TODO gracefully handle shutdown
    http.serve_forever()


if __name__ == '__main__':
    main()