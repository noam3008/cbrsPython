'''
Created on Apr 20, 2017

@author: iagmon
'''

from model.Utils.Assert import Assertion 
import model.Utils.JsonComparisonUtils as jsonComparer
from controllers.CLIUtils.QuestionHandler import QuestionHandler

class MyEngine(object):

    def __init__(self,testDefinition):
        '''
        Will recieve the test structure (the list of the json file and the step defintions). 
        Will read all the json files and save it as some structure.
        '''
        self.numberOfStep = 0
        self.testDefinietion = testDefinition
        self.assertion= Assertion()
        self.questionHandler = QuestionHandler()
        self.flag = False
        
    def process_request(self,httpRequest,typeOfCalling):
        '''
        This will received the request that 
        arrived from the eNodeB,
         will assert the request according to the json file and in case the assert was successful,
          will return the response from the json file        '''
        if typeOfCalling == "heartBeat":
            self.compareJsonReq(httpRequest, "heartBeat.json")
            return self.process_response(True)
                 
        try:
            self.compareJsonReq(httpRequest,self.getExpectedJsonFileName())
        except Exception:
            exceptionHadBeenThrownAlready = True
            return "An Error Accured while comparing between actual and expected request"
        return self.process_response()

    def compareJsonReq(self,httpRequest,expectedJsonFileName):
        self.assertion.compareJsonReq(httpRequest,expectedJsonFileName)
        
        
    def process_response(self,heartBeatRequest=False):
        '''
        This will received the request that 
        arrived from the eNodeB,
         will assert the request according to the json file and in case the assert was successful,
          will return the response from the json file
        '''      
        if((heartBeatRequest)&&(self.testDefinietion.jsonNamesOfSteps[self.numberOfStep-1]=="Grant.json")):
            return self.parseJsonToDicByFileName("heartBeat.json", "response")
        
        jsonAfterParse = self.parseJsonToDicByFileName(self.getExpectedJsonFileName(),"response")
        if(self.testDefinietion.defenitionsOfSteps[self.numberOfStep] == "nstep"):
            self.questAnswerPartOfJson = self.parseJsonToDicByFileName(self.getExpectedJsonFileName(),"questions")
            self.flag = True
        
        self.numberOfStep+=1
        return jsonAfterParse
    
    def parseJsonToDicByFileName(self,jsonFileName,nodeName,jsonRepoPath="C:/Users/iagmon/Desktop/jsonFolder/"):
        return jsonComparer.parseJsonToDic(jsonRepoPath, jsonFileName,nodeName)
    
    def getExpectedJsonFileName(self):
        return self.testDefinietion.jsonNamesOfSteps[self.numberOfStep]
    
    def getQuestionAnswerPart(self):
        return self.questAnswerPartOfJson
    
    
    