from flask import Flask,request,jsonify,g,redirect,url_for,abort
from controllers.ENodeBController import ENodeBController
import logging
import Utils.Consts as consts
from collections import OrderedDict
import json
app = Flask(__name__)
app.config['JSON_SORT_KEYS'] = False

enodeBController = ENodeBController(None)
@app.route('/cbsd/<typeOfCalling>/',methods=['POST'])
def sent_Flask_Req_To_Server(typeOfCalling):
    logger = enodeBController.engine.currentLogger
    json_dict = json.loads(request.data,object_pairs_hook=OrderedDict)
    logger.print_And_Log_To_File(logger.currentLoggerName, "request from CBSD : " + str(request.data),True)
    logger.print_And_Log_To_File(json.dumps(request.data, indent=4, sort_keys=True),True)
    print "CBSD sent " + str(typeOfCalling) + consts.REQUEST_NODE_NAME
    while (len(enodeBController.engine.testDefinietion.jsonNamesOfSteps)> enodeBController.engine.numberOfStep):
        response = enodeBController.linker_Between_Flask_To_Engine(json_dict,typeOfCalling)
        logger.print_And_Log_To_File(logger.currentLoggerName,"response from engine to CBSD " + str(jsonify(response)),False)
        print "engine sent " + str(typeOfCalling) + consts.RESPONSE_NODE_NAME
        if(consts.ERROR_VALIDATION_MESSAGE in str(response)):     
            return redirectShutDownDueToAnValidationError()
        if(consts.HEART_BEAT_TIMEOUT_MESSAGE in str(response)):
            return redirectShutDownDueToHeartbeatsTimeOut()
        return jsonify(response)
    return redirectShutDownDueToFinishOfTest()

@app.route('/hello')
def hello_world():
    print "hello world"
        
@app.route('/shutdown', methods=['GET', 'POST'])
def shutdown():
    logger = enodeBController.engine.currentLogger
    app.app_context()
    func = request.environ.get(consts.NAME_OF_SERVER_WERKZUG)
    func()
    if(consts.ERROR_VALIDATION_MESSAGE in str(request.args['validationMessage'])):
        abort(400, consts.ERROR_VALIDATION_MESSAGE)
        logger.print_And_Log_To_File(logger.currentLoggerName,"the server shot down due to " + consts.ERROR_VALIDATION_MESSAGE)
    if(consts.HEART_BEAT_TIMEOUT_MESSAGE in str(request.args['validationMessage'])):
        abort(400, consts.HEART_BEAT_TIMEOUT_MESSAGE)
        logger.print_And_Log_To_File(logger.currentLoggerName,"the server shot down due to " + consts.HEART_BEAT_TIMEOUT_MESSAGE)      
    return consts.SERVER_SHUT_DOWN_MESSAGE + consts.TEST_HAD_BEEN_FINISHED_FLASK

def redirectShutDownDueToFinishOfTest():
        return redirect(url_for(consts.SHUTDOWN_FUNCTION_NAME, validationMessage=consts.TEST_HAD_BEEN_FINISHED_FLASK))
    
    
def redirectShutDownDueToAnValidationError():
    return redirect(url_for(consts.SHUTDOWN_FUNCTION_NAME, validationMessage=consts.ERROR_VALIDATION_MESSAGE))

def redirectShutDownDueToHeartbeatsTimeOut():
    return redirect(url_for(consts.SHUTDOWN_FUNCTION_NAME, validationMessage=consts.HEART_BEAT_TIMEOUT_MESSAGE))


def runFlaskServer(host):
    app.run(host,threaded=True)
    



