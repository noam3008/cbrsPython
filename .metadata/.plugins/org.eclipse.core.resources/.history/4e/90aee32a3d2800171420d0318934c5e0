'''
Created on Apr 20, 2017

@author: iagmon
'''
from Engine import MyEngine
from xml.dom import minidom
import json
import logging
import Step
class TestEngine(object):
    '''
    classdocs
    '''
################ after that it will include test def
    def __init__(self, testDefinition):
        '''
        Will recieve the test structure (the list of the json file and the step defintions). 
        Will read all the json files and save it as some structure.
        '''
        self.testDefinition = testDefinition
    
    def setup(self):       
        self.engine = MyEngine(self.testDefinition) 
        
    
    def test_successful_request(self):
        logging.info("test successful request")
        #valid_json = self.engine.assertion.parseJsonToDic( self.testDefinition.jsonName)
        response = self.engine.process_request(self.testDefinition.jsonName)
        # Assert that the response is the expected response 
        
    def  test_unsuccessful_request(self):
        logging.info("test unsuccessful request")
        invalid_json = "";
        response = self.engine.process_request(invalid_json)
        # Assert that an exception was thrown
        
    ################################## this will be an json that sent as a req later
   
    
class TestDefinition(object):
    
    def __init__(self,steps):
        for(step in steps):
            self.nameOfDef = step.nameOfDef
            self.jsonName = step.jsonName

logging.basicConfig(filename='example.log',level=logging.DEBUG)
firstStep = Step("bstep","oldRegistrationReq_1_2_3.json")
testDefinition = TestDefinition(firstStep)
testEngine = TestEngine(testDefinition)
testEngine.setup()
testEngine.test_successful_request()
    
 