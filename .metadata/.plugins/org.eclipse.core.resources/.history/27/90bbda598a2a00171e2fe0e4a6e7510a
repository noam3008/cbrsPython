'''
Created on Apr 20, 2017

@author: iagmon
'''

from model.Utils.Assert import Assertion 
import model.Utils.JsonComparisonUtils as jsonComparer
from QuestionHandler import QuestionHandler
import os
from logging.config import listen



class MyEngine(object):

    def __init__(self,testDefinition):
        '''
        Will recieve the test structure (the list of the json file and the step defintions). 
        Will read all the json files and save it as some structure.
        '''
        self.numberOfStep = 0
        self.testDefinietion = testDefinition
        self.assertion= Assertion()
        self.questionHandler = QuestionHandler()
        self._events = dict()
        
    def process_request(self,httpRequest):
        '''
        This will received the request that 
        arrived from the eNodeB,
         will assert the request according to the json file and in case the assert was successful,
          will return the response from the json file        '''
        self.assertion.compareJsonReq(httpRequest,self.getExpectedJsonFileName())
        return self.process_response()
               
    def dispatch_event(self, event):
        """
        Dispatch an instance of Event class
        """
        # Dispatch the event to all the associated listeners 
        if event.type in self._events.keys():
            listeners = self._events[ event.type ]
            
            for listener in listeners:
                listener(self.event)
                
    def add_event_listener(self, event_type, listener):
        """
        Add an event listener for an event type
        """
        print("add event listener " + str(event_type) + "," + str(listener))
        # Add listener to the event type
        if not self.has_listener( event_type, listener ):
            listeners = self._events.get( event_type, [] )
        
            listeners.append( listener )
            
            self._events[ event_type ] = listeners
            
    def has_listener(self, event_type, listener):
        """
        Return true if listener is register to event_type
        """
        # Check for event type and for the listener
        if event_type in self._events.keys():
            return listener in self._events[ event_type ]
        else:
            return False
        
    
    def process_response(self):
        '''
        This will received the request that 
        arrived from the eNodeB,
         will assert the request according to the json file and in case the assert was successful,
          will return the response from the json file
        '''
        
        if(self.testDefinietion.defenitionsOfSteps[self.numberOfStep] == "nstep"):
            questionAnswerPart = jsonComparer.parseJsonToDic("C:/Users/iagmon/Desktop/jsonFolder/", self.getExpectedJsonFileName(),"questions")
            self.questionHandler.ShowQuestionsAndGetAnswersFromClient(questionAnswerPart)
            return None
                      
        jsonAfterParse = jsonComparer.parseJsonToDic("C:/Users/iagmon/Desktop/jsonFolder/", self.getExpectedJsonFileName(),"response")
        self.numberOfStep+=1
        return jsonAfterParse
    
    def getExpectedJsonFileName(self):
        return self.testDefinietion.jsonNamesOfSteps[self.numberOfStep]
    
    def checksss(self):
        self.dispatch_event(Event("Respond"))
        
class Event( object ):
    """
    Generic event to use with EventDispatcher.
    """
    
    def __init__(self, event_type, data=None):
        """
        The constructor accepts an event type as string and a custom data
        """
        self._type = event_type
        self._data = data
        
    @property 
    def type(self):
        """
        Returns the event type
        """
        return self._type
        
    @property
    def data(self):
        """
        Returns the data associated to the event
        """
        return self._data
    
class MyEvent( Event ):
    """
    When subclassing Event class the only thing you must do is to define
    a list of class level constants which defines the event types and the 
    string associated to them
    """
    
    ASK     = "askMyEvent"
    RESPOND = "respondMyEvent"
    
        
        
    

    

        
    
    